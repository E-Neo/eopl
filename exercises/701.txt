% 1. (int -> int)
proc (x) -(x, 3)

% 2. ((t -> int) -> (t -> int))
proc (f) proc (x) -((f x), 1)

% 3. (t -> t)
proc (x) x

% 4. ((t1 -> t2) -> (t1 -> t2))
%       x : (t1 -> t2)
%    => y : t1
%    => (x y) : t2
%    => proc (y) (x y) : (t1 -> t2)
%    => proc (x) proc (y) (x y) : ((t1 -> t2) -> (t1 -> t2))
proc (x) proc (y) (x y)

% 5. ((int -> t) -> t)
proc (x) (x 3)

% 6. ? (t -> t) where t = (t -> t)
proc (x) (x x)

% 7. (bool -> int)
proc (x) if x then 88 else 99

% 8. (bool -> (int -> int))
proc (x) proc (y) if x then y else 99

% 9. int
(proc (p) if p then 88 else 99
 33)

;; % 10. No type
(proc (p) if p then 88 else 99
 (proc (z) z))

% 11. No type
proc (f)
  proc (g)
    proc (p)
      proc (x) if (p (f x)) then (g 1) else -((f x), 1)

% 12. int -> ((int -> bool) -> (((int -> bool) -> int) -> int))
%     fun : int -> (p.type -> (f.type -> int))
%     x : int
%     p : int -> bool
%     f : ((int -> bool) -> int)
proc (x)
  proc (p)
    proc (f)
      if (p x) then -(x, 1) else (f p)

% 13. ? ((t -> t) -> (t -> t))
proc (f)
  let d = proc (x)
            proc (z) ((f (x x)) z)
  in proc (n) ((f (d d)) n)
